import { WcaCliConfig } from "web-component-analyzer";
declare enum LineColor {
    AQUA = "aqua",
    CLOUDY = "cloudy",
    COLORED = "colored",
    CUT = "cut",
    DARK = "dark",
    FIRE = "fire",
    GRASS = "grass",
    RAINBOW = "rainbow",
    SOLAR = "solar",
    VINTAGE = "vintage",
    WATER = "water",
    NONE = "none"
}
interface IBadge {
    alt: string;
    url: string;
    img: string;
}
interface IGeneratorParamsError {
    error: string;
}
interface IUserTemplate {
    name: string;
    template: string;
    params?: Params;
}
declare type PlaceholderSyntax = [string, string];
interface IConfig {
    input: string;
    output: string;
    package: string;
    help: boolean;
    text?: string;
    demo?: string;
    lineBreak: string;
    checkLinks: boolean;
    tab: string;
    silent: boolean;
    dry: boolean;
    logo?: ILogo;
    placeholder: PlaceholderSyntax;
    line: LineColor;
    templates?: IUserTemplate[];
    headingPrefix: {
        [key: number]: string;
    };
    badges?: IBadge[];
    contributorsPerRow: number;
    pkg: IPackage;
    documentationConfig: WcaCliConfig;
    extend?: string;
}
interface IPackage {
    name?: string;
    contributors?: IContributor[];
    license?: License;
}
interface IGeneratorArgs {
    config: IConfig;
    blueprint: string;
    configPath: string;
    generateReadme: GenerateReadmeFunction;
}
declare type Params = {
    [key: string]: string;
} | {
    optional?: {
        [key: string]: string;
    };
};
declare type GenerateReadmeFunction = ({ config, blueprint, generators, configPath }: {
    config: IConfig;
    blueprint: string;
    generators: IGenerator<any>[];
    configPath: string;
}) => Promise<string>;
interface IGeneratorParamsArgs extends IGeneratorArgs {
    match: RegExpMatchArray;
}
interface IGenerator<T> {
    name: string;
    regex: (args: IGeneratorArgs) => RegExp;
    template: (args: T) => string | Promise<string>;
    params?: Params | ((args: IGeneratorParamsArgs) => T | IGeneratorParamsError | Promise<T | IGeneratorParamsError>);
}
interface ILogo {
    src: string;
    alt?: string;
    width?: number;
    height?: number;
}
interface IContributor {
    name: string;
    url?: string;
    email?: string;
    img?: string;
    info?: string[];
}
declare type License = string;
/**
 * Generates a readme.
 * @param pkg
 * @param blueprint
 * @param configPath
 * @param generators
 */
declare function generateReadme({ config, blueprint, configPath, generators }: {
    config: IConfig;
    blueprint: string;
    configPath: string;
    generators: IGenerator<any>[];
}): Promise<string>;
