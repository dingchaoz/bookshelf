import * as tsModule_$2 from "typescript";
import * as tsModule_$3 from "typescript";
import * as tsModule_$4 from "typescript";
import { JSDocTag, JSDoc, Node, Type, Declaration, InterfaceDeclaration, PropertyDeclaration, PropertySignature, SetAccessorDeclaration, SourceFile, StringLiteral, SyntaxKind, TypeChecker, CallExpression, Expression, ObjectLiteralExpression, Program, CompilerOptions, Diagnostic } from "typescript";
import { SimpleType } from "ts-simple-type";
interface JsDocTag {
    node: JSDocTag;
    tag: string;
    comment?: string;
}
interface JsDoc {
    node?: JSDoc;
    comment?: string;
    tags?: JsDocTag[];
}
interface ComponentCSSProperty {
    name: string;
    jsDoc?: JsDoc;
}
interface ComponentCSSPart {
    name: string;
    jsDoc?: JsDoc;
}
declare type ComponentMemberKind = "property" | "attribute" | "method";
interface ComponentMemberBase {
    kind: ComponentMemberKind;
    node: Node;
    type: Type | SimpleType;
    deprecated?: boolean | string;
    jsDoc?: JsDoc;
}
interface ComponentMemberSetterBase extends ComponentMemberBase {
    default?: object | string | number | boolean | null;
    required?: boolean;
}
interface ComponentMemberProperty extends ComponentMemberSetterBase {
    kind: "property";
    propName: string;
    attrName?: string;
}
interface ComponentMemberAttribute extends ComponentMemberSetterBase {
    kind: "attribute";
    attrName: string;
}
interface ComponentMemberMethod extends ComponentMemberBase {
    kind: "method";
    name: string;
}
declare type ComponentMember = ComponentMemberProperty | ComponentMemberAttribute | ComponentMemberMethod;
interface ComponentSlot {
    name?: string;
    jsDoc?: JsDoc;
    permittedTagNames?: string[];
}
interface EventDeclaration {
    node: Node;
    type: SimpleType | Type;
    name: string;
    jsDoc?: JsDoc;
}
interface ComponentDeclaration {
    node: Node;
    inheritNodes: Node[];
    inherits: string[];
    members: ComponentMember[];
    events: EventDeclaration[];
    slots: ComponentSlot[];
    cssProperties: ComponentCSSProperty[];
    cssParts: ComponentCSSPart[];
    deprecated?: boolean | string;
    className?: string;
    jsDoc?: JsDoc;
}
interface ComponentDefinition {
    fromLib: boolean;
    node: Node;
    tagName: string;
    declaration: ComponentDeclaration;
}
declare type ComponentDiagnosticSeverity = "error" | "warning";
interface ComponentDiagnostic {
    message: string;
    severity: ComponentDiagnosticSeverity;
    node: Node;
}
declare function parseDeclarationEvents(node: Node, context: ParseComponentMembersContext): EventDeclaration[] | undefined;
declare function parseDeclarationMembers(node: Node, context: ParseComponentMembersContext): ComponentMember[] | undefined;
/**
 * Visits custom element component definitions.
 * @param node
 * @param context
 */
declare function visitComponentDefinitions(node: Node, context: VisitComponentDefinitionContext): DefinitionNodeResult[] | undefined;
/**
 * Visits and finds global events.
 * @param node
 * @param context
 */
declare function visitGlobalEvents(node: Node, context: ParseVisitContextGlobalEvents): void;
/**
 * Parses @cssprop | @cssproperty js doc annotations on interface/class-like nodes.
 * @param node
 * @param context
 */
declare function parseDeclarationCSSProps(node: Node, context: ParseComponentMembersContext): ComponentCSSProperty[] | undefined;
/**
 * Parses @csspart jsdoc annotations on interface/class-like nodes.
 * @param node
 * @param context
 */
declare function parseDeclarationCSSParts(node: Node, context: ParseComponentMembersContext): ComponentCSSPart[] | undefined;
/**
 * Parses @slot js doc annotations on interface/class-like nodes.
 * @param node
 * @param context
 */
declare function parseDeclarationSlots(node: Node, context: ParseComponentMembersContext): ComponentSlot[] | undefined;
/**
 * Options to give when analyzing components
 */
interface AnalyzeComponentsOptions {
    checker: TypeChecker;
    ts?: typeof tsModule_$2;
    flavors?: ParseComponentFlavor[];
    config?: AnalyzeComponentsConfig;
}
/**
 * Configuration to give when analyzing components.
 */
interface AnalyzeComponentsConfig {
    diagnostics?: boolean;
    analyzeLibDom?: boolean;
    excludedDeclarationNames?: string[];
}
/**
 * The result returned after components have been analyzed.
 */
interface AnalyzeComponentsResult {
    sourceFile: SourceFile;
    componentDefinitions: ComponentDefinition[];
    globalEvents: EventDeclaration[];
    diagnostics: ComponentDiagnostic[];
}
/**
 * Analyzes all components in a source file.
 * @param sourceFile
 * @param options
 */
declare function analyzeComponents(sourceFile: SourceFile, options: AnalyzeComponentsOptions): AnalyzeComponentsResult;
interface FlavorVisitContext {
    checker: TypeChecker;
    ts: typeof tsModule_$3;
    config: AnalyzeComponentsConfig;
    emitContinue?(): void;
    emitDiagnostics(diagnostic: ComponentDiagnostic): void;
    features?: FlavorVisitContextFeatures;
}
interface FlavorVisitContextFeatures {
    getMembers(): ComponentMember[];
    getSlots(): ComponentSlot[];
    getCSSProps(): ComponentCSSProperty[];
    getCSSParts(): ComponentCSSPart[];
    getEvents(): EventDeclaration[];
    getInheritNodes(): Node[];
    getInherits(): string[];
}
interface DefinitionNodeResult {
    tagName: string;
    identifierNode: Node;
    definitionNode: Node;
    declarationNode: Node;
    declarationHandler?: ParseComponentFlavor["parseDeclarationMembers"];
}
interface VisitComponentDefinitionContext extends FlavorVisitContext {
    emitDefinitionResult(result: DefinitionNodeResult): void;
}
interface ParseComponentMembersContext extends FlavorVisitContext {
    declarationNode: Node;
}
interface ParseVisitContextGlobalEvents extends FlavorVisitContext {
    emitEvent(event: EventDeclaration): void;
}
interface ParseComponentFlavor {
    visitComponentDefinitions?(node: Node, context: VisitComponentDefinitionContext): void;
    parseDeclarationMembers?(node: Node, context: ParseComponentMembersContext): ComponentMember[] | undefined;
    parseDeclarationEvents?(node: Node, context: ParseComponentMembersContext): EventDeclaration[] | undefined;
    parseDeclarationSlots?(node: Node, context: ParseComponentMembersContext): ComponentSlot[] | undefined;
    parseDeclarationCSSProps?(node: Node, context: ParseComponentMembersContext): ComponentCSSProperty[] | undefined;
    parseDeclarationCSSParts?(node: Node, context: ParseComponentMembersContext): ComponentCSSPart[] | undefined;
    visitGlobalEvents?(node: Node, context: ParseVisitContextGlobalEvents): void;
}
interface WcaCliConfig {
    debug?: boolean;
    outFile?: string;
    outDir?: string;
    format?: "json" | "md" | "markdown" | "vscode" | "debug";
    analyzeLibraries?: boolean;
    markdown?: {
        titleLevel?: number;
    };
    analyze?: AnalyzeComponentsConfig;
}
/**
 * This function analyzes only the HTMLElement declaration found in "lib.dom.d.ts" source file provided by Typescript.
 * @param program
 * @param ts
 */
declare function analyzeLibDomHtmlElement(program: Program, ts?: typeof tsModule_$4): ComponentDeclaration | undefined;
declare const VERSION = "0.1.19";
/**
 * Transforms results to json.
 * @param results
 * @param program
 * @param config
 */
declare function debugJsonTransformer(results: AnalyzeComponentsResult[], program: Program, config: WcaCliConfig): string;
declare function stripTypescriptValues(input: any): any;
/**
 * Transforms results to json.
 * @param results
 * @param program
 * @param config
 */
declare function jsonTransformer(results: AnalyzeComponentsResult[], program: Program, config: WcaCliConfig): string;
/**
 * Transforms the component results to markdown
 * @param results
 * @param program
 * @param config
 */
declare function markdownTransformer(results: AnalyzeComponentsResult[], program: Program, config: WcaCliConfig): string;
/**
 * Vscode json output format transformer.
 * @param results
 * @param program
 * @param config
 */
declare function vscodeTransformer(results: AnalyzeComponentsResult[], program: Program, config: WcaCliConfig): string;
interface CliCommand {
    id: string;
    printHelp?(): Promise<void> | void;
    run(config: WcaCliConfig, ...args: string[]): Promise<number | void> | number | void;
}
/**
 * A CLI command for analyzing components.
 */
declare class AnalyzeCliCommand implements CliCommand {
    id: string;
    /**
     * Prints help for this command.
     */
    printHelp(): void;
    /**
     * Runs the analyze cli command.
     * @param config
     * @param inputGlobs
     */
    run(config: WcaCliConfig, ...inputGlobs: string[]): Promise<void>;
    /**
     * Analyzes input globs and returns the transformed result.
     * @param inputGlobs
     * @param config
     */
    analyze(inputGlobs: string | string[], config: WcaCliConfig): Promise<string>;
    /**
     * Transforms analyze results based on the wca cli config.
     * @param results
     * @param program
     * @param config
     */
    private transformResults;
}
/**
 * The main function of the cli.
 */
declare function cli(): Promise<undefined>;
export { AnalyzeComponentsOptions, AnalyzeComponentsConfig, AnalyzeComponentsResult, analyzeComponents, analyzeLibDomHtmlElement, VERSION, ComponentCSSProperty, ComponentDeclaration, ComponentDefinition, ComponentDiagnosticSeverity, ComponentDiagnostic, ComponentMemberKind, ComponentMemberBase, ComponentMemberSetterBase, ComponentMemberProperty, ComponentMemberAttribute, ComponentMemberMethod, ComponentMember, ComponentSlot, EventDeclaration, JsDocTag, JsDoc, cli, WcaCliConfig, AnalyzeCliCommand, debugJsonTransformer, stripTypescriptValues, jsonTransformer, markdownTransformer, vscodeTransformer };
//# sourceMappingURL=index.cjs.d.ts.map