import { analyzeGlobs } from "../../analyze-globs";
import { CommandError } from "../cli-command";
import { printResultDiagnostics } from "./print-diagnostics";
/**
 * A CLI command for emitting diagnostics for components.
 */
export class DiagnoseCliCommand {
    constructor() {
        this.id = "diagnose";
    }
    /**
     * Prints the help text for this command.
     */
    printHelp() {
        console.log(`Usage:
  \$ wca diagnose [<input-glob>] [options]
  
Examples:
  $ wca diagnose
  $ wca diagnose src
  $ wca diagnose "./src/**/*.{js,ts}"
  $ wca diagnose my-element.js

Options:
  --help\t\tPrint this message.
`);
    }
    /**
     * Runs this command
     * @param config
     * @param inputGlobs
     */
    async run(config, ...inputGlobs) {
        let passed = true;
        // Set "diagnostics" to true in the analyze configuration.
        config.analyze = Object.assign(Object.assign({}, (config.analyze || {})), { diagnostics: true });
        // Analyze the globs and emit diagnostics.
        await analyzeGlobs(inputGlobs, config, {
            didExpandGlobs(filePaths) {
                if (filePaths.length === 0) {
                    throw new CommandError(`Didn't find any files to analyze.`);
                }
            },
            willAnalyzeFiles(filePaths) {
                console.log(`Analyzing ${filePaths.length} file${filePaths.length === 1 ? "" : "s"}...`);
            },
            emitAnalyzedFile: (file, result, { program }) => {
                // Print diagnostics of the result.
                printResultDiagnostics(result);
                if (result.diagnostics.length > 0) {
                    passed = false;
                }
            }
        });
        return passed ? 0 : 1;
    }
}
