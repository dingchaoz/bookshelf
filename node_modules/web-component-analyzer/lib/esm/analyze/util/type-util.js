import { SimpleTypeKind } from "ts-simple-type";
/**
 * Relax the type so that for example "string literal" become "string" and "function" become "any"
 * This is used for javascript files to provide type checking with Typescript type inferring
 * @param type
 */
export function relaxType(type) {
    switch (type.kind) {
        case SimpleTypeKind.INTERSECTION:
        case SimpleTypeKind.UNION:
            return Object.assign(Object.assign({}, type), { types: type.types.map(t => relaxType(t)) });
        case SimpleTypeKind.ENUM:
            return Object.assign(Object.assign({}, type), { types: type.types.map(t => relaxType(t)) });
        case SimpleTypeKind.ARRAY:
            return Object.assign(Object.assign({}, type), { type: relaxType(type.type) });
        case SimpleTypeKind.PROMISE:
            return Object.assign(Object.assign({}, type), { type: relaxType(type.type) });
        case SimpleTypeKind.OBJECT:
            return {
                name: type.name,
                kind: SimpleTypeKind.OBJECT
            };
        case SimpleTypeKind.INTERFACE:
        case SimpleTypeKind.FUNCTION:
        case SimpleTypeKind.CLASS:
            return {
                name: type.name,
                kind: SimpleTypeKind.ANY
            };
        case SimpleTypeKind.NUMBER_LITERAL:
            return { kind: SimpleTypeKind.NUMBER };
        case SimpleTypeKind.STRING_LITERAL:
            return { kind: SimpleTypeKind.STRING };
        case SimpleTypeKind.BOOLEAN_LITERAL:
            return { kind: SimpleTypeKind.BOOLEAN };
        case SimpleTypeKind.BIG_INT_LITERAL:
            return { kind: SimpleTypeKind.BIG_INT };
        case SimpleTypeKind.ENUM_MEMBER:
            return Object.assign(Object.assign({}, type), { type: relaxType(type.type) });
        case SimpleTypeKind.ALIAS:
            return Object.assign(Object.assign({}, type), { target: relaxType(type.target) });
        default:
            return type;
    }
}
