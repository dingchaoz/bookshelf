import * as tsModule from "typescript";
import { Declaration, InterfaceDeclaration, Node, PropertyDeclaration, PropertySignature, SetAccessorDeclaration, SourceFile, StringLiteral, SyntaxKind, TypeChecker } from "typescript";
export interface AstContext {
    ts: typeof tsModule;
    checker: TypeChecker;
}
/**
 * Resolves all relevant declarations of a specific node. Defaults to "interfaces and classes".
 * @param node
 * @param context
 */
export declare function resolveDeclarations(node: Node, context: {
    checker: TypeChecker;
    ts: typeof tsModule;
}): Declaration[];
/**
 * Returns if a name is public (doesn't start with "_");
 * @param name
 */
export declare function isPropNamePublic(name: string): boolean;
/**
 * Returns if a node is public looking at its modifiers.
 * @param node
 * @param ts
 */
export declare function hasPublicSetter(node: PropertyDeclaration | PropertySignature | SetAccessorDeclaration, ts: typeof tsModule): boolean;
/**
 * Returns if a number has a flag
 * @param num
 * @param flag
 */
export declare function hasFlag(num: number, flag: number): boolean;
/**
 * Returns if a node has a specific modifier.
 * @param node
 * @param modifierKind
 */
export declare function hasModifier(node: Node, modifierKind: SyntaxKind): boolean;
/**
 * Returns all keys and corresponding interface/class declarations for keys in an interface.
 * @param interfaceDeclaration
 * @param ts
 * @param checker
 */
export declare function getInterfaceKeys(interfaceDeclaration: InterfaceDeclaration, { ts, checker }: AstContext): [string, Declaration, StringLiteral][];
export declare function isNodeInLibDom(node: Node | SourceFile): boolean;
export declare function isPropertyRequired(property: PropertySignature | PropertyDeclaration, checker: TypeChecker): boolean;
export declare function isNodeInDeclarationFile(node: Node): boolean;
/**
 * Find a node recursively walking up the tree using parent nodes.
 * @param node
 * @param test
 */
export declare function findParent<T = Node>(node: Node | undefined, test: (node: Node) => boolean): T | undefined;
/**
 * Find a node recursively walking down the children of the tree. Depth first search.
 * @param node
 * @param test
 */
export declare function findChild<T = Node>(node: Node | undefined, test: (node: Node) => node is T & Node): T | undefined;
//# sourceMappingURL=ast-util.d.ts.map