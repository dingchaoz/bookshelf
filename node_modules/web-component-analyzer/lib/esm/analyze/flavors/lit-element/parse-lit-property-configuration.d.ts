import { SimpleType } from "ts-simple-type";
import { CallExpression, Expression, Node, ObjectLiteralExpression } from "typescript";
import { FlavorVisitContext } from "../parse-component-flavor";
export interface LitPropertyConfiguration {
    type?: SimpleType | string;
    attribute?: string | boolean;
    node?: {
        type?: Node;
        attribute?: Node;
    };
    hasConverter?: boolean;
    default?: object | string | number | boolean | null;
}
/**
 * Returns a potential lit element property decorator.
 * @param node
 * @param context
 */
export declare function getLitElementPropertyDecorator(node: Node, context: FlavorVisitContext): undefined | CallExpression;
/**
 * Returns a potential lit property decorator configuration.
 * @param node
 * @param context
 */
export declare function getLitElementPropertyDecoratorConfig(node: Node, context: FlavorVisitContext): undefined | LitPropertyConfiguration;
/**
 * Parses an object literal expression and returns a lit property configuration.
 * @param node
 * @param context
 */
export declare function getLitPropertyOptions(node: ObjectLiteralExpression, context: FlavorVisitContext): LitPropertyConfiguration;
export declare function parseLitPropertyOption({ kind, initializer, config }: {
    kind: string | undefined;
    initializer: Expression;
    config: LitPropertyConfiguration;
}, context: FlavorVisitContext): LitPropertyConfiguration;
//# sourceMappingURL=parse-lit-property-configuration.d.ts.map