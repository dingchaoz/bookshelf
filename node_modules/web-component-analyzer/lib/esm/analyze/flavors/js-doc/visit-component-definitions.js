import { getJsDoc } from "../../util/js-doc-util";
/**
 * Parses @customElement js doc annotations on interface/class-like nodes and emits a definition.
 * @param node
 * @param context
 */
export function visitComponentDefinitions(node, context) {
    const { ts } = context;
    // /** @customElement my-element */ myClass extends HTMLElement { ... }
    if (ts.isInterfaceDeclaration(node) || ts.isClassDeclaration(node)) {
        const jsDoc = getJsDoc(node, ts);
        if (jsDoc != null && jsDoc.tags != null) {
            for (const tag of jsDoc.tags) {
                if (["customelement", "element"].includes(tag.tag.toLowerCase())) {
                    context.emitDefinitionResult({
                        tagName: tag.comment || "",
                        identifierNode: tag.node,
                        declarationNode: node,
                        definitionNode: tag.node
                    });
                }
            }
        }
    }
    node.forEachChild(child => visitComponentDefinitions(child, context));
}
