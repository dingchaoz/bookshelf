import { SimpleTypeKind } from "ts-simple-type";
import { parseJsDocTypeString } from "../../util/js-doc-util";
import { parseJsDocForNode } from "./helper";
/**
 * Parses @slot js doc annotations on interface/class-like nodes.
 * @param node
 * @param context
 */
export function parseDeclarationSlots(node, context) {
    const { ts } = context;
    if (ts.isInterfaceDeclaration(node) || ts.isClassDeclaration(node)) {
        return parseJsDocForNode(node, "slot", (tagNode, parsed) => {
            // Grab the type from jsdoc and use it to find permitted tag names
            // Example: @slot {"div"|"span"} myslot
            const permittedTagNameType = parsed.type == null ? undefined : parseJsDocTypeString(parsed.type);
            const permittedTagNames = (() => {
                if (permittedTagNameType == null) {
                    return undefined;
                }
                switch (permittedTagNameType.kind) {
                    case SimpleTypeKind.STRING_LITERAL:
                        return [permittedTagNameType.value];
                    case SimpleTypeKind.UNION:
                        return permittedTagNameType.types
                            .filter((type) => type.kind === SimpleTypeKind.STRING_LITERAL)
                            .map(type => type.value);
                    default:
                        return undefined;
                }
            })();
            return {
                name: parsed.name,
                jsDoc: parsed.comment != null ? { comment: parsed.comment } : undefined,
                permittedTagNames
            };
        }, context);
    }
    return undefined;
}
