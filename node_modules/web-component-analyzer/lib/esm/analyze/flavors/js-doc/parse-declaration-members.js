import { SimpleTypeKind } from "ts-simple-type";
import { parseJsDocTypeString } from "../../util/js-doc-util";
import { parseJsDocForNode } from "./helper";
/**
 * Parses @prop | @property js doc annotations on interface/class-like nodes.
 * @param node
 * @param context
 */
export function parseDeclarationMembers(node, context) {
    const { ts } = context;
    if (ts.isInterfaceDeclaration(node) || ts.isClassDeclaration(node)) {
        const properties = parseJsDocForNode(node, ["prop", "property"], (tagNode, parsed) => {
            if (parsed.name != null) {
                return {
                    kind: "property",
                    propName: parsed.name,
                    jsDoc: parsed.comment != null ? { comment: parsed.comment } : undefined,
                    type: (parsed.type && parseJsDocTypeString(parsed.type)) || { kind: SimpleTypeKind.ANY },
                    node: tagNode
                };
            }
        }, context);
        const attributes = parseJsDocForNode(node, ["attr", "attribute"], (tagNode, parsed) => {
            if (parsed.name != null) {
                return {
                    kind: "attribute",
                    attrName: parsed.name,
                    jsDoc: parsed.comment && { comment: parsed.comment },
                    type: (parsed.type && parseJsDocTypeString(parsed.type)) || { kind: SimpleTypeKind.ANY },
                    node: tagNode
                };
            }
        }, context);
        if (attributes != null || properties != null) {
            return [...(attributes || []), ...(properties || [])];
        }
    }
    return undefined;
}
