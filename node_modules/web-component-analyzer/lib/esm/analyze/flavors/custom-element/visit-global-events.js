import { SimpleTypeKind } from "ts-simple-type";
import { getInterfaceKeys } from "../../util/ast-util";
/**
 * Visits and finds global events.
 * @param node
 * @param context
 */
export function visitGlobalEvents(node, context) {
    const { ts } = context;
    // declare global { interface HTMLElementEventMap  { "my-event": CustomEvent<string>; } }
    if (ts.isInterfaceDeclaration(node) && node.name.text === "HTMLElementEventMap") {
        const extensions = getInterfaceKeys(node, context);
        for (const [eventName] of extensions) {
            context.emitEvent({ type: { kind: SimpleTypeKind.ANY }, name: eventName, node });
        }
        return;
    }
    node.forEachChild(child => {
        visitGlobalEvents(child, context);
    });
}
